# -*- coding: utf-8 -*-
# ====================================================
#
#   Copyright (c) 2023 Nuoyan
#   nuoyanlib is licensed under Mulan PSL v2.
#   You can use this software according to the terms and conditions of the Mulan PSL v2.
#   You may obtain a copy of Mulan PSL v2 at:
#            http://license.coscl.org.cn/MulanPSL2
#   THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
#   See the Mulan PSL v2 for more details.
#
#   Author        : 诺言Nuoyan
#   Email         : 1279735247@qq.com
#   Gitee         : https://gitee.com/charming-lee
#   Last Modified : 2024-04-28
#
# ====================================================


from typing import List, Union, Optional, Tuple, Callable, Any, Dict
from mod.client.system.clientSystem import ClientSystem
from mod.client.ui.screenNode import ScreenNode
from mod.client.ui.viewBinder import ViewBinder
from ..config import SERVER_SYSTEM_NAME, MOD_NAME


_PATH: str
_UI_NAMESPACE_GAME_TICK: str
_UI_PATH_GAME_TICK: str
_UI_DEF_GAME_TICK: str
_ALL_CLIENT_ENGINE_EVENTS: List[str]
_lsn_func_args: List[Tuple[str, str, str, str, int]]


def _add_listener(
    func: Callable,
    event_name: str = "",
    namespace: str = MOD_NAME,
    system_name: str = SERVER_SYSTEM_NAME,
    priority: int = 0
) -> None: ...
def client_listener(
    event_name: Union[str, Callable] = "",
    namespace: str = "",
    system_name: str = "",
    priority: int = 0,
) -> Callable[[Callable], Callable]: ...
def _listen_custom(self: ClientSystem) -> None: ...
def _listen_engine(self: ClientSystem) -> None: ...


class NuoyanClientSystem(ClientSystem):
    _game_tick_node: Optional[ScreenNode]
    _ui_init_finished: bool
    __handle: int
    _auto_show_ui: Dict[Tuple[str, int], List[Callable[[bool], Any]]]
    _old_carried_item: Tuple[str, int]
    def __init__(self: ..., namespace: str, system_name: str): ...
    def Destroy(self: ...): ...
    def Update(self: ...): ...
    def GyroSensorChangedClientEvent(self: ..., args): ...
    def ModBlockEntityTickClientEvent(self: ..., args): ...
    def ModBlockEntityRemoveClientEvent(self: ..., args): ...
    def AchievementButtonMovedClientEvent(self: ..., args): ...
    def OnKeyboardControllerLayoutChangeClientEvent(self: ..., args): ...
    def OnGamepadControllerLayoutChangeClientEvent(self: ..., args): ...
    def OnGamepadTriggerClientEvent(self: ..., args): ...
    def OnGamepadStickClientEvent(self: ..., args): ...
    def OnGamepadKeyPressClientEvent(self: ..., args): ...
    def ModBlockEntityLoadedClientEvent(self: ..., args): ...
    def CloseNeteaseShopEvent(self: ..., args): ...
    def PopScreenAfterClientEvent(self: ..., args): ...
    def TapOrHoldReleaseClientEvent(self: ..., args): ...
    def TapBeforeClientEvent(self: ..., args): ...
    def RightClickReleaseClientEvent(self: ..., args): ...
    def RightClickBeforeClientEvent(self: ..., args): ...
    def OnMouseMiddleDownClientEvent(self: ..., args): ...
    def OnKeyPressInGame(self: ..., args): ...
    def OnClientPlayerStopMove(self: ...): ...
    def OnClientPlayerStartMove(self: ...): ...
    def OnBackButtonReleaseClientEvent(self: ..., args): ...
    def MouseWheelClientEvent(self: ..., args): ...
    def LeftClickReleaseClientEvent(self: ..., args): ...
    def LeftClickBeforeClientEvent(self: ..., args): ...
    def HoldBeforeClientEvent(self: ..., args): ...
    def GetEntityByCoordReleaseClientEvent(self: ..., args): ...
    def GetEntityByCoordEvent(self: ..., args): ...
    def ClientJumpButtonReleaseEvent(self: ..., args): ...
    def ClientJumpButtonPressDownEvent(self: ..., args): ...
    def PlaySoundClientEvent(self: ..., args): ...
    def PlayMusicClientEvent(self: ..., args): ...
    def OnMusicStopClientEvent(self: ..., args): ...
    def ScreenSizeChangedClientEvent(self: ..., args): ...
    def PushScreenEvent(self: ..., args): ...
    def PopScreenEvent(self: ..., args): ...
    def PlayerChatButtonClickClientEvent(self: ..., args): ...
    def OnItemSlotButtonClickedEvent(self: ..., args): ...
    def GridComponentSizeChangedClientEvent(self: ..., args): ...
    def ClientPlayerInventoryOpenEvent(self: ..., args): ...
    def ClientPlayerInventoryCloseEvent(self: ..., args): ...
    def ClientChestOpenEvent(self: ..., args): ...
    def ClientChestCloseEvent(self: ..., args): ...
    def WalkAnimEndClientEvent(self: ..., args): ...
    def WalkAnimBeginClientEvent(self: ..., args): ...
    def AttackAnimEndClientEvent(self: ..., args): ...
    def AttackAnimBeginClientEvent(self: ..., args): ...
    def StopUsingItemClientEvent(self: ..., args): ...
    def StartUsingItemClientEvent(self: ..., args): ...
    def PlayerTryDropItemClientEvent(self: ..., args): ...
    def OnCarriedNewItemChangedClientEvent(self: ..., args): ...
    def ItemReleaseUsingClientEvent(self: ..., args): ...
    def InventoryItemChangedClientEvent(self: ..., args): ...
    def GrindStoneRemovedEnchantClientEvent(self: ..., args): ...
    def ClientShapedRecipeTriggeredEvent(self: ..., args): ...
    def ClientItemUseOnEvent(self: ..., args): ...
    def ClientItemTryUseEvent(self: ..., args): ...
    def AnvilCreateResultItemAfterClientEvent(self: ..., args): ...
    def ActorUseItemClientEvent(self: ..., args): ...
    def ActorAcquiredItemClientEvent(self: ..., args): ...
    def StepOnBlockClientEvent(self: ..., args): ...
    def StartDestroyBlockClientEvent(self: ..., args): ...
    def StepOffBlockClientEvent(self: ..., args): ...
    def ShearsDestoryBlockBeforeClientEvent(self: ..., args): ...
    def PlayerTryDestroyBlockClientEvent(self: ..., args): ...
    def OnStandOnBlockClientEvent(self: ..., args): ...
    def OnModBlockNeteaseEffectCreatedClientEvent(self: ..., args): ...
    def OnEntityInsideBlockClientEvent(self: ..., args): ...
    def OnAfterFallOnBlockClientEvent(self: ..., args): ...
    def FallingBlockCauseDamageBeforeClientEvent(self: ..., args): ...
    def ClientBlockUseEvent(self: ..., args): ...
    def PerspChangeClientEvent(self: ..., args): ...
    def OnPlayerHitBlockClientEvent(self: ..., args): ...
    def GameTypeChangedClientEvent(self: ..., args): ...
    def ExtinguishFireClientEvent(self: ..., args): ...
    def DimensionChangeFinishClientEvent(self: ..., args): ...
    def DimensionChangeClientEvent(self: ..., args): ...
    def CameraMotionStopClientEvent(self: ..., args): ...
    def CameraMotionStartClientEvent(self: ..., args): ...
    def LeaveEntityClientEvent(self: ..., args): ...
    def StartRidingClientEvent(self: ..., args): ...
    def OnMobHitMobClientEvent(self: ..., args): ...
    def OnGroundClientEvent(self: ..., args): ...
    def HealthChangeClientEvent(self: ..., args): ...
    def EntityStopRidingEvent(self: ..., args): ...
    def EntityModelChangedClientEvent(self: ..., args): ...
    def ApproachEntityClientEvent(self: ..., args): ...
    def UnLoadClientAddonScriptsBefore(self: ..., args): ...
    def RemovePlayerAOIClientEvent(self: ..., args): ...
    def RemoveEntityClientEvent(self: ..., args): ...
    def OnLocalPlayerStopLoading(self: ..., args): ...
    def OnCommandOutputClientEvent(self: ..., args): ...
    def LoadClientAddonScriptsAfter(self: ..., args): ...
    def ChunkLoadedClientEvent(self: ..., args): ...
    def ChunkAcquireDiscardedClientEvent(self: ..., args): ...
    def AddPlayerCreatedClientEvent(self: ..., args): ...
    def AddPlayerAOIClientEvent(self: ..., args): ...
    def AddEntityClientEvent(self: ..., args): ...
    def OnScriptTickClient(self: ...): ...
    def UiInitFinished(self: ..., args): ...
    def OnGameTick(self: ...): ...
    def SetQueryVar(self: ..., entity_id: str, name: str, value: float, sync: bool = True) -> None: ...
    def AddPlayerRenderResources(
        self: ...,
        player_id: str,
        rebuild: bool,
        *res_tuple: Tuple[str, str],
    ) -> Tuple[bool, ...]: ...
    def CallServer(self: ..., name: str, callback: Callable = None, *args: Any) -> None: ...
    def BroadcastToAllClient(self: ..., event_name: str, event_data: Any) -> None: ...
    def RegisterAndCreateUI(
        self: ...,
        namespace: str,
        cls_path: str,
        ui_screen_def: str,
        param: Optional[dict] = None,
    ) -> ScreenNode: ...
    def RegisterAutoShowUiForItem(
        self: ...,
        item_name: Union[str, None],
        ui_node: Optional[ScreenNode] = None,
        func: Optional[Callable[[bool], Any]] = None,
        item_aux: int = -1,
    ) -> None: ...
    @client_listener("OnCarriedNewItemChangedClientEvent")
    def _OnCarriedNewItemChangedClientEvent(self: ..., args: dict) -> None: ...
    def _set_ui_visible(self: ..., item: Tuple[str, int], visible: bool) -> None: ...
    @client_listener("UiInitFinished")
    def _UiInitFinished(self: ..., args: dict) -> None: ...
    def _set_print_log(self: ...) -> None: ...
    def _listen_client_game_tick(self: ...) -> None: ...
    def _start_game_tick(self: ...) -> None: ...
    def _check_on_game_tick(self: ...) -> None: ...


class _GameTick(ScreenNode):
    cs: ClientSystem
    notify_cln: bool
    def __init__(self: ..., namespace: str, name: str, param: Optional[dict]) -> None: ...
    @ViewBinder.binding(ViewBinder.BF_BindString, "#main.gametick")
    def OnGameTick(self: ...) -> None: ...


class _TransitClientSystem(ClientSystem):
    def __init__(self: ..., namespace: str, system_name: str): ...
    @client_listener(namespace="NuoyanLib", system_name="_TransitServerSystem")
    def _SetQueryCache(self: ..., args: dict) -> None: ...
    @client_listener(namespace="NuoyanLib", system_name="_TransitServerSystem")
    def _SetQueryVar(self: ..., args: dict) -> None: ...


_transit_sys: _TransitClientSystem
