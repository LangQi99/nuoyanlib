# -*- coding: utf-8 -*-
# ====================================================
#
#   Copyright (c) 2023 Nuoyan
#   nuoyanlib is licensed under Mulan PSL v2.
#   You can use this software according to the terms and conditions of the Mulan PSL v2.
#   You may obtain a copy of Mulan PSL v2 at:
#            http://license.coscl.org.cn/MulanPSL2
#   THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
#   See the Mulan PSL v2 for more details.
#
#   Author        : 诺言Nuoyan
#   Email         : 1279735247@qq.com
#   Gitee         : https://gitee.com/charming-lee
#   Last Modified : 2023-09-03
#
# ====================================================


from typing import List, Dict, Union, Optional, Tuple, Callable, Any
from mod.client.system.clientSystem import ClientSystem
from mod.client.ui.screenNode import ScreenNode
from mod.client.ui.viewBinder import ViewBinder


_PATH: str
_UI_NAMESPACE_GAME_TICK: str
_UI_PATH_GAME_TICK: str
_UI_DEF_GAME_TICK: str
ALL_ENGINE_EVENTS: List[str]
_lsnFuncArgs: List[Dict[str, Union[str, int, Callable]]]


def listen_server(
    eventName: Union[str, Callable] = "",
    namespace: str = "",
    systemName: str = "",
    priority: int = 0,
) -> Callable: ...


class NuoyanClientSystem(ClientSystem):
    __gameTickNode: ScreenNode
    _uiInitFinished: bool
    __handle: int
    def __init__(self, namespace: str, systemName: str) -> None: ...
    def Destroy(self) -> None: ...
    def Update(self) -> None: ...
    def CloseNeteaseShopEvent(self, args: dict) -> None: ...
    def PopScreenAfterClientEvent(self, args: dict) -> None: ...
    def TapOrHoldReleaseClientEvent(self, args: dict) -> None: ...
    def TapBeforeClientEvent(self, args: dict) -> None: ...
    def RightClickReleaseClientEvent(self, args: dict) -> None: ...
    def RightClickBeforeClientEvent(self, args: dict) -> None: ...
    def OnMouseMiddleDownClientEvent(self, args: dict) -> None: ...
    def OnKeyPressInGame(self, args: dict) -> None: ...
    def OnClientPlayerStopMove(self) -> None: ...
    def OnClientPlayerStartMove(self) -> None: ...
    def OnBackButtonReleaseClientEvent(self, args: dict) -> None: ...
    def MouseWheelClientEvent(self, args: dict) -> None: ...
    def LeftClickReleaseClientEvent(self, args: dict) -> None: ...
    def LeftClickBeforeClientEvent(self, args: dict) -> None: ...
    def HoldBeforeClientEvent(self, args: dict) -> None: ...
    def GetEntityByCoordReleaseClientEvent(self, args: dict) -> None: ...
    def GetEntityByCoordEvent(self, args: dict) -> None: ...
    def ClientJumpButtonReleaseEvent(self, args: dict) -> None: ...
    def ClientJumpButtonPressDownEvent(self, args: dict) -> None: ...
    def PlaySoundClientEvent(self, args: dict) -> None: ...
    def PlayMusicClientEvent(self, args: dict) -> None: ...
    def OnMusicStopClientEvent(self, args: dict) -> None: ...
    def ScreenSizeChangedClientEvent(self, args: dict) -> None: ...
    def PushScreenEvent(self, args: dict) -> None: ...
    def PopScreenEvent(self, args: dict) -> None: ...
    def PlayerChatButtonClickClientEvent(self, args: dict) -> None: ...
    def OnItemSlotButtonClickedEvent(self, args: dict) -> None: ...
    def GridComponentSizeChangedClientEvent(self, args: dict) -> None: ...
    def ClientPlayerInventoryOpenEvent(self, args: dict) -> None: ...
    def ClientPlayerInventoryCloseEvent(self, args: dict) -> None: ...
    def ClientChestOpenEvent(self, args: dict) -> None: ...
    def ClientChestCloseEvent(self, args: dict) -> None: ...
    def WalkAnimEndClientEvent(self, args: dict) -> None: ...
    def WalkAnimBeginClientEvent(self, args: dict) -> None: ...
    def AttackAnimEndClientEvent(self, args: dict) -> None: ...
    def AttackAnimBeginClientEvent(self, args: dict) -> None: ...
    def StopUsingItemClientEvent(self, args: dict) -> None: ...
    def StartUsingItemClientEvent(self, args: dict) -> None: ...
    def PlayerTryDropItemClientEvent(self, args: dict) -> None: ...
    def OnCarriedNewItemChangedClientEvent(self, args: dict) -> None: ...
    def ItemReleaseUsingClientEvent(self, args: dict) -> None: ...
    def InventoryItemChangedClientEvent(self, args: dict) -> None: ...
    def GrindStoneRemovedEnchantClientEvent(self, args: dict) -> None: ...
    def ClientShapedRecipeTriggeredEvent(self, args: dict) -> None: ...
    def ClientItemUseOnEvent(self, args: dict) -> None: ...
    def ClientItemTryUseEvent(self, args: dict) -> None: ...
    def AnvilCreateResultItemAfterClientEvent(self, args: dict) -> None: ...
    def ActorUseItemClientEvent(self, args: dict) -> None: ...
    def ActorAcquiredItemClientEvent(self, args: dict) -> None: ...
    def StepOnBlockClientEvent(self, args: dict) -> None: ...
    def StartDestroyBlockClientEvent(self, args: dict) -> None: ...
    def StepOffBlockClientEvent(self, args: dict) -> None: ...
    def ShearsDestoryBlockBeforeClientEvent(self, args: dict) -> None: ...
    def PlayerTryDestroyBlockClientEvent(self, args: dict) -> None: ...
    def OnStandOnBlockClientEvent(self, args: dict) -> None: ...
    def OnModBlockNeteaseEffectCreatedClientEvent(self, args: dict) -> None: ...
    def OnEntityInsideBlockClientEvent(self, args: dict) -> None: ...
    def OnAfterFallOnBlockClientEvent(self, args: dict) -> None: ...
    def FallingBlockCauseDamageBeforeClientEvent(self, args: dict) -> None: ...
    def ClientBlockUseEvent(self, args: dict) -> None: ...
    def PerspChangeClientEvent(self, args: dict) -> None: ...
    def OnPlayerHitBlockClientEvent(self, args: dict) -> None: ...
    def GameTypeChangedClientEvent(self, args: dict) -> None: ...
    def ExtinguishFireClientEvent(self, args: dict) -> None: ...
    def DimensionChangeFinishClientEvent(self, args: dict) -> None: ...
    def DimensionChangeClientEvent(self, args: dict) -> None: ...
    def CameraMotionStopClientEvent(self, args: dict) -> None: ...
    def CameraMotionStartClientEvent(self, args: dict) -> None: ...
    def LeaveEntityClientEvent(self, args: dict) -> None: ...
    def StartRidingClientEvent(self, args: dict) -> None: ...
    def OnMobHitMobClientEvent(self, args: dict) -> None: ...
    def OnGroundClientEvent(self, args: dict) -> None: ...
    def HealthChangeClientEvent(self, args: dict) -> None: ...
    def EntityStopRidingEvent(self, args: dict) -> None: ...
    def EntityModelChangedClientEvent(self, args: dict) -> None: ...
    def ApproachEntityClientEvent(self, args: dict) -> None: ...
    def UnLoadClientAddonScriptsBefore(self, args: dict) -> None: ...
    def RemovePlayerAOIClientEvent(self, args: dict) -> None: ...
    def RemoveEntityClientEvent(self, args: dict) -> None: ...
    def OnLocalPlayerStopLoading(self, args: dict) -> None: ...
    def OnCommandOutputClientEvent(self, args: dict) -> None: ...
    def LoadClientAddonScriptsAfter(self, args: dict) -> None: ...
    def ChunkLoadedClientEvent(self, args: dict) -> None: ...
    def ChunkAcquireDiscardedClientEvent(self, args: dict) -> None: ...
    def AddPlayerCreatedClientEvent(self, args: dict) -> None: ...
    def AddPlayerAOIClientEvent(self, args: dict) -> None: ...
    def AddEntityClientEvent(self, args: dict) -> None: ...
    def OnScriptTickClient(self) -> None: ...
    def UiInitFinished(self, args: dict) -> None: ...
    def OnGameTick(self) -> None: ...
    def SetQueryVar(self, entityId: str, name: str, value: float, sync: bool = True) -> None: ...
    def AddPlayerRenderResources(self, playerId: str, *resTuple: Tuple[str, str]) -> Tuple[bool, ...]: ...
    def CallServer(self, name: str, callback: Callable = None, *args: Any) -> None: ...
    def BroadcastToAllClient(self, eventName: str, eventData: Any) -> None: ...
    def RegisterAndCreateUI(
        self,
        namespace: str,
        clsPath: str,
        uiScreenDef: str,
        param: Optional[dict] = None,
    ) -> ScreenNode: ...
    def _setPrintLog(self) -> None: ...
    @listen_server("_SetQueryCache")
    def _OnSetQueryCache(self, args: dict) -> None: ...
    @listen_server("_SetQueryVar")
    def _setQuery(self, args: dict) -> None: ...
    @listen_server("_ListenServerGameTick")
    def _OnListenServerGameTick(self, args: dict = None) -> None: ...
    def _listenClientGameTick(self) -> None: ...
    @listen_server("UiInitFinished")
    def _OnUiInitFinished(self, args: dict) -> None: ...
    @listen_server("_SetMotion")
    def _OnSetMotion(self, motion: Tuple[float, float, float]) -> None: ...
    def __listen(self) -> None: ...
    def _startGameTick(self) -> None: ...
    def _checkOnGameTick(self) -> None: ...


class _GameTick(ScreenNode):
    cs: ClientSystem
    notifySv: bool
    notifyCl: bool
    def __init__(self, namespace: str, name: str, param: dict) -> None: ...
    @ViewBinder.binding(ViewBinder.BF_BindString, "#main.gametick")
    def OnGameTick(self) -> None: ...












