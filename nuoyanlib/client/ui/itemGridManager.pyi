# -*- coding: utf-8 -*-
# ====================================================
#
#   Copyright (c) 2023 Nuoyan
#   nuoyanlib is licensed under Mulan PSL v2.
#   You can use this software according to the terms and conditions of the Mulan PSL v2.
#   You may obtain a copy of Mulan PSL v2 at:
#            http://license.coscl.org.cn/MulanPSL2
#   THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
#   See the Mulan PSL v2 for more details.
#
#   Author        : 诺言Nuoyan
#   Email         : 1279735247@qq.com
#   Gitee         : https://gitee.com/charming-lee
#   Last Modified : 2023-12-10
#
# ====================================================


from typing import List, Dict, Union, Optional, Tuple, Set, NewType, Callable, Any
from mod.client.ui.controls.progressBarUIControl import ProgressBarUIControl
from mod.client.ui.controls.buttonUIControl import ButtonUIControl
from item_fly_anim import ItemFlyAnim
from item_tips_box import ItemTipsBox
from nuoyanScreenNode import NuoyanScreenNode


CellPos = NewType("CellPos", Tuple[str, int])
ItemCell = NewType("ItemCell", Union[str, CellPos])


_IMAGE_PATH_ITEM_CELL_SELECTED: str
_IMAGE_PATH_ITEM_CELL_DEFAULT: str
_UI_NAME_COUNT: str
_UI_NAME_ITEM_RENDERER: str
_UI_NAME_DURABILITY: str
_UI_NAME_DEFAULT: str
_UI_NAME_HEAP: str
_SHORTCUT: str
_INV27: str
_INV36: str
_RESERVED_KEYS = Tuple[str, str, str]


class _Inv36ItemList(list):
    def __init__(self, shortcut: List[Optional[dict]], inv27: List[Optional[dict]]) -> None: ...
    def __setitem__(self, index: int, val: Optional[dict]) -> None: ...
    def append(self, obj: Optional[dict]) -> None: ...


def _listen_item_changes(func: Callable) -> Callable: ...
def _analyze_changes(
    old: Dict[str, List[Optional[dict]]],
    new: Dict[str, List[Optional[dict]]],
) -> Dict[CellPos, Dict[str, Optional[dict]]]: ...
def _update_changes(
    oldChanges: Dict[CellPos, Dict[str, Optional[dict]]],
    newChanges: Dict[CellPos, Dict[str, Optional[dict]]],
) -> None: ...


class ItemGridManager(ItemFlyAnim, ItemTipsBox, NuoyanScreenNode):
    _gridItemsData: Dict[str, List[Optional[dict]]]
    _itemHeapData: Dict[str, Union[dict, int, bool, ProgressBarUIControl]]
    _selectedItem: Dict[str, Union[dict, str]]
    _gridPaths: Dict[str, Tuple[str, bool]]
    _gridKeys: List[str]
    _cellPaths: Dict[CellPos, str]
    _cellPoses: Dict[str, CellPos]
    _cellUiCtrls: Dict[str, Tuple[ButtonUIControl, ...]]
    _changes: Dict[CellPos, Dict[str, dict]]
    _lockedCells: Set[CellPos]
    _lockedGrids: Set[str]
    __moveInGridList: List[str]
    __inited: List[str]
    __tick: int
    __orgItem: dict
    __namespace: str
    def __init__(self, namespace: str, name: str, param: dict) -> None: ...
    def __listen(self) -> None: ...
    def Update(self) -> None: ...
    def _OnCoordRelease(self, args: dict) -> None: ...
    def OnReceiveItemsDataFromServerBefore(self, args: dict) -> None: ...
    def OnItemGridChanged(self, args: dict) -> None: ...
    def OnItemGridSelectedItem(self, args: dict) -> None: ...
    def OnItemCellTouchUp(self, args: dict) -> None: ...
    def _onItemCellTouchUp(self, args: dict) -> None: ...
    def OnItemCellTouchMoveIn(self, args: dict) -> None: ...
    def _onItemCellTouchMoveIn(self, args: dict) -> None: ...
    def OnItemCellDoubleClick(self, args: dict) -> None: ...
    def _onItemCellDoubleClick(self, args: dict) -> None: ...
    def OnItemCellLongClick(self, args: dict) -> None: ...
    def _onItemCellLongClick(self, args: dict) -> None: ...
    def OnItemCellTouchDown(self, args: dict) -> None: ...
    def _onItemCellTouchDown(self, args: dict) -> None: ...
    def OnItemCellTouchMove(self, args: dict) -> None: ...
    def OnItemCellTouchMoveOut(self, args: dict) -> None: ...
    def OnItemCellTouchCancel(self, args: dict) -> None: ...
    def GetAllItemCellUIControls(self, key: str) -> List[ButtonUIControl]: ...
    def GetItemCellUIControl(self, cell: ItemCell) -> Optional[ButtonUIControl]: ...
    def SetItemCellDurabilityBar(self, cell: ItemCell, itemDict: dict = None, auto: bool = False) -> bool: ...
    def SetItemCellRenderer(self, cell: ItemCell, itemDict: dict = None, auto: bool = False) -> bool: ...
    def SetItemCellCountLabel(self, cell: ItemCell, itemDict: dict = None, auto: bool = False) -> bool: ...
    def UpdateAndSyncItemGrids(self, keys: Optional[str, Tuple[str, ...]] = None) -> bool: ...
    def ClearItemGridState(self) -> bool: ...
    def _setItemFlyAnim(self, itemDict: dict, fromCell: ItemCell, toCell: ItemCell) -> None: ...
    def StartItemHeapProgressBar(self) -> bool: ...
    def PauseItemHeapProgressBar(self) -> bool: ...
    def LockItemGrid(self, key: str, lock: bool) -> bool: ...
    def IsItemGridLocked(self, key: str) -> bool: ...
    def LockItemCell(self, cell: ItemCell, lock: bool) -> bool: ...
    def IsItemCellLocked(self, cell: ItemCell) -> bool: ...
    def _is_cell_exist(self, *cell: ItemCell) -> bool: ...
    @_listen_item_changes
    def _setCellItem(self, cell: ItemCell, itemDict: dict) -> None: ...
    def SetItemGridItems(self, itemDictList: List[dict], key: str, sync: bool = True) -> bool: ...
    def GetItemGridItems(self, key: str) -> List[Optional[dict]]: ...
    def SetItemCellItem(self, cell: ItemCell, itemDict: dict, sync: bool = True) -> bool: ...
    def GetItemCellItem(self, cell: ItemCell) -> Optional[dict]: ...
    def MoveItems(
        self,
        fromCell: ItemCell,
        toCell: ItemCell,
        moveCount: int = -1,
        sync: bool = True,
        flyAnim: bool = True,
        force: bool = False,
    ) -> bool: ...
    def _exchangeItems(self, fromCell: ItemCell, toCell: ItemCell) -> None: ...
    def _moveItemsToEmpty(self, fromCell: ItemCell, toCell: ItemCell, count: int) -> None: ...
    def _moveItemsToSame(self, fromCell: ItemCell, toCell: ItemCell, count: int) -> None: ...
    def MergeItems(self, toCell: ItemCell, sync: bool = True, flyAnim: bool = True) -> bool: ...
    @_listen_item_changes
    def SeparateItemsEvenly(
        self,
        fromCell: ItemCell,
        fromOrgItem: dict,
        toCellList: List[ItemCell],
        sync: bool = True,
    ) -> bool: ...
    @_listen_item_changes
    def SetItemCellCount(self, cell: ItemCell, count: int, absolute:int = 0, sync: bool = True) -> int: ...
    def GetItemCellCount(self, cell: ItemCell) -> int: ...
    def ReturnItemsToInv(self, keys: Optional[Union[str, Tuple[str, ...]]] = None) -> bool: ...
    @_listen_item_changes
    def PutItemToGrids(
        self,
        putItem: Union[dict, ItemCell],
        keys: Optional[Union[str, Tuple[str, ...]]] = None,
        sync: bool = True,
        flyAnim: bool = True,
    ) -> List[CellPos]: ...
    def _putItem(self, putItem: dict, key: str) -> List[CellPos]: ...
    def ThrowItem(self, what: Union[dict, ItemCell], count: int = -1, sync: bool = True) -> bool: ...
    def SyncAllItemsFromServer(self, keys: Optional[Union[str, Tuple[str, ...]]]) -> bool: ...
    def _receiveItemsData(self, args: dict) -> None: ...
    def SetSelectedItem(self, cell: ItemCell, selected: bool = True) -> bool: ...
    def GetSelectedItem(self) -> Dict[str, Union[dict, str]]: ...
    def SetItemHeapData(
        self,
        cell: ItemCell,
        count: int,
    ) -> Optional[Dict[str, Union[dict, int, bool, ProgressBarUIControl]]]: ...
    def GetItemHeapData(self) -> Dict[str, Union[dict, int, bool, ProgressBarUIControl]]: ...
    def RegisterItemGrid(self, key: str, path: str, isSingle: bool = False) -> bool: ...
    def InitItemGrids(
        self,
        keys:Union[str, Tuple[str, ...]] = None,
        finishedFunc: Optional[Callable] = None,
        *args: Any,
        **kwargs: Any,
    ) -> bool: ...
    def _initItemGrids(
        self,
        keys: Tuple[str, ...],
        finishedFunc: Optional[Callable],
        args: Any,
        kwargs: Any,
    ) -> None: ...
    def AllItemGridsInited(self, keys: Optional[Union[str, Tuple[str, ...]]] = None) -> bool: ...
    def GetItemGridKey(self, cell: ItemCell) -> Optional[str]: ...
    def GetItemCellPath(self, cell: ItemCell) -> Optional[str]: ...
    def GetItemCellPos(self, cell: ItemCell) -> Optional[CellPos]: ...












